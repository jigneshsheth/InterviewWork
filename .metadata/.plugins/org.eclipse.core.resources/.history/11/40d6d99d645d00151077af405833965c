
public class LevelOneQuestions {
	
	/**
	 * A zero-indexed array A consisting of N different integers is given. 
	 * The array contains integers in the range [1..(N + 1)], which means that exactly one 
	 * element is missing.Your goal is to find that missing element.
	 * Write a function:
	 * 
	 * class Solution { public int findMissingElem(int[] A); }
	 * that, given a zero-indexed array A, returns the value of the missing element.
	 * For example, given array A such that:
	 * A[0] = 2
	 * A[1] = 3  
	 * A[2] = 1
	 * A[3] = 5
	 * the function should return 4, as it is the missing element.
	 * Assume that:
	 * N is an integer within the range [0..100,000];
	 * the elements of A are all distinct;
	 * each element of array A is an integer within the range [1..(N + 1)].
	 * Complexity:
	 * expected worst-case time complexity is O(N);
	 * expected worst-case space complexity is O(1), beyond input storage (not counting the storage required for input arguments).
	 * Elements of input arrays can be modified.
	 */
	
    public int findMissingElem(int[] A) {
    	// If the length of the array is 0, no element is missing
        if(A.length == 0) { return 0; }
        if(A.length == 1) { return 2; }
        // Numbers are from [1..to (N+1)]
        long N = A.length + 1;
        // The sum of N numbers is N*(N+1)/2
        long total = N * (N + 1) / 2;

        // Loop through the numbers in the array taking away from
        // the total sum. Whatever number is left is what is
        // missing
        for (int i : A) {
            total -= i;
        }

        return (int)total;
    }

}
