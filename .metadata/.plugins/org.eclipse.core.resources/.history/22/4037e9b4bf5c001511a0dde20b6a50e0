
public class DynamicProgrammingQuestions {
	
	public static void main(String[] args) {
		int[] arr = new int[]{7, 2, 3, 1, 5, 8, 9, 6};
		int[] arr2 = new int[]{1, -2, 3, 10, -4, 7, 2, -5};
		int output = maxSumOfAllSubArrays(arr2);
		System.out.println(output);
	}
	
	/**
	 * A sub-array has some number of some continuous numbers. 
	 * Given an integer array with positive numbers and negative numbers, 
	 * get the maximum sum of all sub-arrays. Time complexity should be O(n). 
	 * For example, in the array {1, -2, 3, 10, -4, 7, 2, -5}, its sub-array 
	 * {3, 10, -4, 7, 2} has the maximum sum 18.
	 * @param arr
	 * @return
	 */
	public static int maxSumOfAllSubArrays(int[] arr) {
		if(arr.length == 0) { return 0; }
		if(arr.length == 1) { return arr[0]; }
		
		// Solution Idea: Naive Approach
		// We could iterate through comparing each subarray
		// and keeping track of which one is the greatest.
		// However this would cost O(n^2) time.
		// We can do this in O(n) time.
		
		// Better Solution:
		// Keep track of the on-going sum and of the max
		// sum so far. If the sum goes below 0, we reset the
		// max sum. If not, keep track of the max at each
		// index and return it. One pass through the list
		// only takes O(n) time.
		
		int lingering_sum = 0;
		int max_sum = 0;
		
		for(int i = 0; i < arr.length; ++i) {
			if(arr[i] <= 0) {
				lingering_sum = arr[i];
			}
			else 
			{
				lingering_sum += arr[i];
			}
			
			if(lingering_sum > max_sum) {
				max_sum = lingering_sum;
			}
		}
		return max_sum;
	}

	/**
	 * Given an unsorted array, find the max length of subsequence in 
	 * which the numbers are in incremental order. 
	 * For example: If the input array is {7, 2, 3, 1, 5, 8, 9, 6}, 
	 * a subsequence with the most numbers in incremental order is {2, 3, 5, 8, 9} 
	 * and the expected output is 5.
	 */
	public static int findMaxLengthOfSubsequence(int[] arr) {
		if(arr.length == 0) { return 0; }
		if(arr.length == 1) { return arr[0]; }


		return 0;
	}
}
